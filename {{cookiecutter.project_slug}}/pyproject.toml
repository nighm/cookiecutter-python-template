# Poetry 项目配置文件
[tool.poetry]
name = "{{cookiecutter.package_name}}"
version = "{{cookiecutter.version}}"
description = "{{cookiecutter.project_description}}"
authors = ["{{cookiecutter.full_name}} <{{cookiecutter.email}}>"]
readme = "README.md"
packages = [{include = "{{cookiecutter.package_name}}", from = "src"}]

# 项目依赖配置
[tool.poetry.dependencies]
# Python版本要求说明：
# 版本选择理由：
# 1. 3.11 提供了显著的性能改进
# 2. 避免使用 3.12+ 版本（部分工具链支持不完整）
python = ">=3.11.0,<3.12.0"

# 核心依赖
{% if cookiecutter.use_mkdocs == 'y' %}
# 文档工具依赖
mkdocs = "^1.5.0"  # 文档生成器
mkdocs-material = "^9.0.0"  # Material主题
mkdocstrings = {extras = ["python"], version = "^0.24.0"}  # API文档支持
{% endif %}

# 开发依赖配置
[tool.poetry.group.dev.dependencies]
# 代码质量工具 - 基础层
black = "^24.2.0"  # 代码格式化
isort = "^5.13.2"  # 导入排序
ruff = "^0.3.0"  # 快速代码检查
mypy = "^1.8.0"  # 类型检查
pydocstyle = "^6.3.0"  # 文档风格检查
pytest = "^8.0.0"  # 单元测试

# 代码质量工具 - 标准层
pytest-cov = "^4.1.0"  # 测试覆盖率
pylint = "^3.0.3"  # 深度代码分析
bandit = "^1.7.7"  # 安全检查
vulture = "^2.10"  # 死代码检测

# 代码质量工具 - 高级层
safety = "^2.4.0b2"  # 依赖安全检查
xenon = "^0.9.1"  # 代码复杂度检查
radon = "^6.0.1"  # 代码度量

# 开发工具
pre-commit = "^3.6.2"  # Git提交钩子
tomli = "^2.0.1"  # TOML文件处理

# 构建系统配置
[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

{% if cookiecutter.use_black == 'y' %}
# Black代码格式化配置
[tool.black]
line-length = 88
target-version = ['py311']
include = '\.pyi?$'
{% endif %}

{% if cookiecutter.use_mypy == 'y' %}
# MyPy类型检查配置
[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
check_untyped_defs = true
{% endif %}

# Pytest测试配置
[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
addopts = "-v --cov=src --cov-report=html"
asyncio_mode = "auto"

# isort导入排序配置
[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88

# 测试覆盖率配置
[tool.coverage.run]
source = ["src"]
branch = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "pass",
    "raise ImportError",
]

[tool.pylint.messages_control]
disable = [
    "C0111",  # missing-docstring
    "C0103",  # invalid-name
    "C0330",  # wrong-hanging-indentation
    "C0326",  # bad-whitespace
    "W0621",  # redefined-outer-name
    "W0614",  # unused-wildcard-import
    "R0903",  # too-few-public-methods
]

[tool.vulture]
min_confidence = 80
paths = ["src"]
exclude = ["tests/"]

# Ruff代码分析配置
[tool.ruff]
target-version = "py311"
line-length = 88
select = ["E", "F", "B", "I"]
ignore = [] 