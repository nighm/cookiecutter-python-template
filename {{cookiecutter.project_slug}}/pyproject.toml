[tool.poetry]
name = "{{ cookiecutter.project_slug }}"
version = "0.1.0"
description = "{{ cookiecutter.description }}"
authors = ["{{ cookiecutter.author }} <{{ cookiecutter.email }}>"]
readme = "README.md"
packages = [{include = "src"}]

[tool.poetry.dependencies]
python = "^{{ cookiecutter.python_version }}"
{% if cookiecutter.use_mkdocs == 'y' %}
mkdocs = "^1.5.0"
mkdocs-material = "^9.0.0"
mkdocstrings = {extras = ["python"], version = "^0.24.0"}
{% endif %}

[tool.poetry.group.dev.dependencies]
{% if cookiecutter.quality_level == "basic" %}
# 基础级别依赖
black = "^23.0"
isort = "^5.12.0"
flake8 = "^6.0.0"
mypy = "^1.0.0"
pytest = "^7.0"
{% endif %}

{% if cookiecutter.quality_level == "standard" %}
# 标准级别依赖（包含基础级别）
black = "^23.0"
isort = "^5.12.0"
flake8 = "^6.0.0"
mypy = "^1.0.0"
pytest = "^7.0"
pytest-cov = "^4.0.0"
pylint = "^2.17.0"
bandit = "^1.7.0"
{% endif %}

{% if cookiecutter.quality_level == "advanced" %}
# 高级级别依赖（包含标准级别）
black = "^23.0"
isort = "^5.12.0"
flake8 = "^6.0.0"
mypy = "^1.0.0"
pytest = "^7.0"
pytest-cov = "^4.0.0"
pylint = "^2.17.0"
bandit = "^1.7.0"
safety = "^2.3.0"
xenon = "^0.9.0"
radon = "^5.1.0"
{% endif %}

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

{% if cookiecutter.use_black == 'y' %}
[tool.black]
line-length = 88
target-version = ["py38"]
include = '\.pyi?$'
{% endif %}

{% if cookiecutter.use_mypy == 'y' %}
[tool.mypy]
python_version = "{{ cookiecutter.python_version }}"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
{% endif %}

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
addopts = "-v --cov=src --cov-report=term-missing"
pythonpath = ["."]

[tool.isort]
profile = "black"
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
line_length = 88

[tool.coverage.run]
source = ["src"]
omit = ["tests/*"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if __name__ == .__main__.:",
    "raise NotImplementedError",
    "if TYPE_CHECKING:",
] 